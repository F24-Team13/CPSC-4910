This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-16T16:50:29.402Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
driver-dashboard/
  public/
    index.html
    manifest.json
    robots.txt
  src/
    App.css
    App.js
    App.test.js
    index.css
    index.js
    logo.svg
    reportWebVitals.js
    setupTests.js
  .gitignore
  Header.js
  package.json
  README.md
driverProgram/
  routes/
    auth.py
    main.py
  Static/
    CSS/
      style.css
    JS/
      app.js
      signup.js
  templates/
    admin/
      add_users.html
      admin_reports.html
      manage_users.html
      review_reports.html
    dashboard/
      admin_dash.html
      driver_dash.html
      sponsor_dash.html
    Destination/
      about.html
      browse_organizations.html
      current_organization.html
      destination.html
      login.html
      messages.html
      signup.html
    partials/
      approve_applications.html
      participating_drivers.html
      product_catalog.html
      redeem_rewards.html
      review_purchases.html
      view_points.html
    password/
      reset_email.html
      reset_password.html
      reset_request.html
      verify.html
    sponsor/
      job_postings.html
      public_profile.html
    base.html
    dash.html
    edit_profile.html
    profile.html
  __init__.py
  email.py
  forms.py
  models.py
.gitignore
config.py
driver_program.py
README.md
requirements.txt

================================================================
Repository Files
================================================================

================
File: driver-dashboard/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: driver-dashboard/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: driver-dashboard/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: driver-dashboard/src/App.css
================
/* App.css */

body {
  margin: 0;
  font-family: 'Arial', sans-serif;
  background-color: #f0f4f8;
}

.dashboard-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  justify-content: space-between;
}

.dashboard-header {
  background-color: #0052cc;
  color: white;
  padding: 1rem;
}

.dashboard-title {
  margin: 0;
}

.dashboard-nav ul {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  justify-content: space-around;
}

.dashboard-nav li a {
  color: white;
  text-decoration: none;
  font-weight: bold;
}

.dashboard-main {
  flex: 1;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
  padding: 2rem;
}

.trip-section, .points-section {
  background-color: white;
  padding: 1rem;
  margin: 1rem;
  border-radius: 8px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  flex-basis: 45%;
}

.trip-table {
  width: 100%;
  border-collapse: collapse;
}

.trip-table th, .trip-table td {
  padding: 0.75rem;
  border-bottom: 1px solid #ccc;
  text-align: left;
}

.dashboard-footer {
  text-align: center;
  background-color: #0052cc;
  color: white;
  padding: 1rem;
}

@media (max-width: 768px) {
  .dashboard-main {
    flex-direction: column;
    align-items: center;
  }

  .trip-section, .points-section {
    flex-basis: 100%;
    margin: 1rem 0;
  }

  .dashboard-nav ul {
    flex-direction: column;
  }

  .dashboard-nav li {
    margin-bottom: 0.5rem;
  }
}

================
File: driver-dashboard/src/App.js
================
// App.js
import React from 'react';
import './App.css';

function App() {
  return (
    <div className="dashboard-container">
      <header className="dashboard-header">
        <h1 className="dashboard-title">Welcome to the Driver Dashboard, Jayde!</h1>
        <nav className="dashboard-nav">
          <ul>
            <li><a href="#">Home</a></li>
            <li><a href="#">Messages</a></li>
            <li><a href="#">Points</a></li>
            <li><a href="#">Catalog</a></li>
            <li><a href="#">Purchases</a></li>
            <li><a href="#">Trips</a></li>
            <li><a href="#">Logout</a></li>
          </ul>
        </nav>
      </header>

      <main className="dashboard-main">
        <section className="trip-section">
          <h2>Your Trips</h2>
          <table className="trip-table">
            <thead>
              <tr>
                <th>Trip ID</th>
                <th>Destination</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody>
              {/* Render trips dynamically here */}
              <tr>
                <td>001</td>
                <td>New York</td>
                <td>Completed</td>
              </tr>
              <tr>
                <td>002</td>
                <td>Chicago</td>
                <td>In Progress</td>
              </tr>
              <tr>
                <td>003</td>
                <td>Los Angeles</td>
                <td>Upcoming</td>
              </tr>
            </tbody>
          </table>
        </section>

        <section className="points-section">
          <h2>Your Points</h2>
          <p>Total Points: <strong>1500</strong></p>
        </section>
      </main>

      <footer className="dashboard-footer">
        <p>&copy; 2024 Driver Dashboard. All rights reserved.</p>
      </footer>
    </div>
  );
}

export default App;

================
File: driver-dashboard/src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: driver-dashboard/src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: driver-dashboard/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: driver-dashboard/src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: driver-dashboard/src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: driver-dashboard/src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: driver-dashboard/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: driver-dashboard/Header.js
================
// src/components/Header.js
import React from 'react';
import { AppBar, Toolbar, Typography, Button } from '@mui/material';

const Header = () => {
  return (
    <AppBar position="static" color="primary">
      <Toolbar>
        <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
          Driver Dashboard
        </Typography>
        <Button color="inherit" href="/profile">Profile</Button>
        <Button color="inherit" href="/points">Points</Button>
        <Button color="inherit" href="/catalog">Catalog</Button>
        <Button color="inherit" href="/purchases">Purchases</Button>
        <Button color="inherit" href="/trips">Trips</Button>
        <Button color="inherit" href="/logout">Logout</Button>
      </Toolbar>
    </AppBar>
  );
}

export default Header;

================
File: driver-dashboard/package.json
================
{
  "name": "driver-dashboard",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: driver-dashboard/README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: driverProgram/routes/auth.py
================
# driverProgram/routes/auth.py
from flask import Blueprint, render_template, redirect, url_for, flash, session, request, jsonify
from flask_login import login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from ..forms import LoginForm, SignupForm, ResetPasswordRequestForm
from ..models import User
from .. import db
import boto3, os, re
from botocore.exceptions import ClientError
from dotenv import load_dotenv
from datetime import datetime, timedelta
from ..forms import ConfirmResetForm

load_dotenv()

auth_bp = Blueprint('auth', __name__, url_prefix='/auth')

# AWS Cognito configuration
CognitoUserPoolId = os.environ.get('COGNITO_USER_POOL_ID')
CognitoClientId = os.environ.get('COGNITO_CLIENT_ID')
CognitoRegion = os.environ.get('COGNITO_REGION')

# Create a Cognito client
cognito_client = boto3.client('cognito-idp', region_name=CognitoRegion)

# Max login attempts before lockout
MAX_LOGIN_ATTEMPTS = 3
LOCK_TIME_MINUTES = 1

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()

    # Initialize login attempt tracking
    if 'login_attempts' not in session:
        session['login_attempts'] = 0
    if 'lock_until' not in session:
        session['lock_until'] = None

    # Check if the user is locked out
    if session['lock_until']:
        lock_until = datetime.strptime(session['lock_until'], '%Y-%m-%d %H:%M:%S')
        if datetime.now() < lock_until:
            time_remaining = (lock_until - datetime.now()).seconds
            flash(f'Your account is locked. Try again in {time_remaining // 60} minute(s).', 'error')
            return render_template('Destination/login.html', form=form)

    if form.validate_on_submit():
        try:
            # Authenticate with Cognito
            response = cognito_client.admin_initiate_auth(
                UserPoolId=CognitoUserPoolId,
                ClientId=CognitoClientId,
                AuthFlow='ADMIN_USER_PASSWORD_AUTH',
                AuthParameters={
                    'USERNAME': form.username.data,
                    'PASSWORD': form.password.data,
                }
            )

            # Get the Cognito IdToken
            id_token = response['AuthenticationResult']['IdToken']
            session['id_token'] = id_token

            # Query the local database for the user
            user = db.session.query(User).filter_by(username=form.username.data).first()

            if user:
                # Reset login attempts on successful login
                session['login_attempts'] = 0
                session['lock_until'] = None

                # Authenticate the user with Flask-Login
                login_user(user, remember=True)

                # Store user role in session if needed
                user_role = user.role.strip().lower()
                session['user_role'] = user_role

                # Redirect to respective dashboard based on user role
                if user_role == 'driver':
                    flash('Logged in successfully!', 'success')
                    return redirect(url_for('main.driver_dash'))
                elif user_role == 'sponsor':
                    flash('Logged in successfully!', 'success')
                    return redirect(url_for('main.sponsor_dash'))
                elif user_role == 'admin':
                    flash('Logged in successfully!', 'success')
                    return redirect(url_for('main.admin_dash'))
                else:
                    flash('User role is not recognized.', 'danger')
                    return redirect(url_for('auth.login'))
            else:
                flash('User not found in local database.', 'danger')

        except cognito_client.exceptions.NotAuthorizedException:
            # Handle incorrect username/password
            session['login_attempts'] += 1
            remaining_attempts = MAX_LOGIN_ATTEMPTS - session['login_attempts']
            if remaining_attempts <= 0:
                session['lock_until'] = (datetime.now() + timedelta(minutes=LOCK_TIME_MINUTES)).strftime('%Y-%m-%d %H:%M:%S')
                flash(f'Too many failed login attempts. Your account is locked for {LOCK_TIME_MINUTES} minute(s).', 'danger')
            else:
                flash(f'Invalid username or password. You have {remaining_attempts} attempt(s) left.', 'danger')
        except Exception as e:
            flash(f'An error occurred: {str(e)}', 'danger')

    return render_template('Destination/login.html', form=form)

@auth_bp.route('/signup', methods=['GET', 'POST'])
def signup():
    form = SignupForm()
    if form.validate_on_submit():
        if form.role.data == 'sponsor':
            sponsor_code = form.sponsor_code.data
            if not sponsor_code or len(sponsor_code) != 6 or not sponsor_code.isdigit():
                flash('Invalid sponsor code.', 'danger')
                return render_template('Destination/signup.html', form=form)
        try:
            birthdate_str = form.birthdate.data.strftime('%Y-%m-%d')
            phone_number = form.phone.data
            if not phone_number.startswith('+'):
                phone_number = '+1' + re.sub(r'\D', '', phone_number)

            # Hash the password before signing up
            password_hash = generate_password_hash(form.password.data)

            # Sign up with Cognito
            response = cognito_client.sign_up(
                ClientId=CognitoClientId,
                Username=form.username.data,
                Password=form.password.data,
                UserAttributes=[
                    {'Name': 'email', 'Value': form.email.data},
                    {'Name': 'name', 'Value': form.first_name.data + " " + form.last_name.data},
                    {'Name': 'phone_number', 'Value': phone_number},
                    {'Name': 'birthdate', 'Value': birthdate_str},
                    {'Name': 'gender', 'Value': form.gender.data},
                    {'Name': 'address', 'Value': form.address.data},
                ]
            )
            new_user = User(
                username=form.username.data,
                email=form.email.data,
                password_hash=password_hash,  # Set the hashed password here
                role=form.role.data,
                sponsor_code=form.sponsor_code.data if form.role.data == 'sponsor' else None
            )
            db.session.add(new_user)
            db.session.commit()
            flash('Account created successfully! Please verify your email to activate your account.', 'success')
            return redirect(url_for('auth.verify'))
        except ClientError as e:
            flash(f'An error occurred: {e.response["Error"]["Message"]}', 'danger')
    return render_template('Destination/signup.html', form=form)

@auth_bp.route('/logout')
@login_required
def logout():
    session.clear()
    logout_user()
    flash('You have been logged out.', 'info')
    return redirect(url_for('auth.login'))

# This function implements the password reset and confirmation functionality using Cognito
@auth_bp.route('/reset_request', methods=['GET', 'POST'])
def reset_request():
    form = ResetPasswordRequestForm()
    if form.validate_on_submit():
        email = form.email.data
        print(f"Email submitted: {email}") 
        cognito_region = os.getenv('COGNITO_REGION')
        cognito_client_id = os.getenv('COGNITO_CLIENT_ID')
        client = boto3.client('cognito-idp', region_name=cognito_region)
        try:
            response = client.forgot_password( ClientId=cognito_client_id, Username=email, )
            print(f"AWS Cognito response: {response}") #debug statement to see AWS response
            flash('Password reset email sent.', 'success')
            return redirect(url_for('auth.confirm_reset'))
        except client.exceptions.UserNotFoundException:
            flash('No user found with that email address.', 'error')
        except Exception as e:
            flash(f'An error occurred: {str(e)}', 'error')
        return redirect(url_for('auth.login')) 
    return render_template('password/reset_request.html', form=form)

@auth_bp.route('/confirm_reset', methods=['GET', 'POST'])
def confirm_reset():
    form = ConfirmResetForm()  # Assuming you have a form for verification code and new password
    if request.method == 'POST' and form.validate_on_submit():
        email = form.email.data
        verification_code = form.verification_code.data
        new_password = form.new_password.data
        cognito_client = boto3.client('cognito-idp', region_name=os.getenv('COGNITO_REGION'))
        try:
            cognito_client.confirm_forgot_password(
                ClientId=os.getenv('COGNITO_CLIENT_ID'),
                Username=email,
                ConfirmationCode=verification_code,
                Password=new_password
            )
            flash('Your password has been reset successfully!', 'success')
            return redirect(url_for('auth.login'))
        except ClientError as e:
            flash(f"Error resetting password: {e.response['Error']['Message']}", 'danger')
    return render_template('password/reset_password.html', form=form)  # Renders the form for GET requests


@auth_bp.route('/verify', methods=['GET', 'POST'])
def verify():
    if request.method == 'POST':
        username = request.form['username'] 
        verification_code = request.form['verification_code']
        try:
            response = cognito_client.confirm_sign_up( ClientId=CognitoClientId, Username=username, ConfirmationCode=verification_code
            )
            flash('Your account has been verified successfully!', 'success')
            return redirect(url_for('auth.login'))
        except ClientError as e:
            flash(f'An error occurred: {e.response["Error"]["Message"]}', 'danger')
    return render_template('password/verify.html')



# To allow admin users to disable or delete users.
@auth_bp.route('/delete_user', methods=['POST'])
def delete_user():
    email = request.form['email']
    cognito_client = boto3.client('cognito-idp', region_name=os.getenv('COGNITO_REGION'))
    try:
        # AdminDeleteUser requires the User Pool ID and Username (usually the email).
        response = cognito_client.admin_delete_user(
            UserPoolId=os.getenv('COGNITO_USER_POOL_ID'),  # Make sure the User Pool ID is in your environment variables
            Username=email
        )
        flash(f'User with email {email} has been deleted successfully.', 'success')
    except cognito_client.exceptions.UserNotFoundException:
        flash('No user found with that email address.', 'error')
    except Exception as e:
        flash(f'An error occurred: {str(e)}', 'error')
    return redirect(url_for('auth.login'))

================
File: driverProgram/routes/main.py
================
from flask import Blueprint, render_template, redirect, url_for, session, flash, request
from driverProgram import db 
from driverProgram import check_database_connection
from sqlalchemy import text 
from flask_login import login_required, current_user
import jwt
from driverProgram.models import JobPosting, Sponsor

# Define the blueprint
main_bp = Blueprint('main', __name__)

# Route for the dashboard, with authentication check and role-based redirection
@main_bp.route('/dashboard')
@login_required
def dashboard():
    # Retrieve user role from the session or database
    user_role = session.get('user_role', current_user.role)
    
    # Redirect based on role
    if user_role == 'driver':
        return redirect(url_for('main.driver_dash'))
    elif user_role == 'sponsor':
        return redirect(url_for('main.sponsor_dash'))
    elif user_role == 'admin':
        return redirect(url_for('main.admin_dash'))
    else:
        flash('Unauthorized access.', 'danger')
        return redirect(url_for('auth.login'))
    
# Route for the home/destination page
@main_bp.route('/')
@main_bp.route('/destination')
def destination():
    return render_template('Destination/destination.html')

# Routes for each role-specific dashboard
@main_bp.route('/driver/dashboard')
@login_required
def driver_dash():
    return render_template('dashboard/driver_dash.html')

@main_bp.route('/sponsor/dashboard')
@login_required
def sponsor_dash():
    return render_template('dashboard/sponsor_dash.html')

@main_bp.route('/admin/dashboard')
@login_required
def admin_dash():
    return render_template('dashboard/admin_dash.html')

# Route for displaying the profile
@main_bp.route('/profile', methods=['GET'])
@login_required
def profile():
    return render_template('profile.html', user=current_user)

# Route for editing the profile
@main_bp.route('/edit_profile', methods=['GET'])
@login_required
def edit_profile():
    return render_template('edit_profile.html', user=current_user)

# Route for updating the profile information
@main_bp.route('/update_profile', methods=['POST'])
@login_required
def update_profile():
    # Update user information from the form
    current_user.username = request.form['username']
    current_user.email = request.form['email']
    current_user.phone = request.form.get('phone')
    current_user.address = request.form.get('address')
    current_user.gender = request.form.get('gender')
    current_user.date_of_birth = request.form.get('date_of_birth')

    # Save changes to the database
    try:
        db.session.commit()
        flash('Your profile has been updated successfully!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'An error occurred: {str(e)}', 'danger')

    return redirect(url_for('main.profile'))

@main_bp.route('/about')
def about():
    db_status = 'connected' if check_database_connection() else 'disconnected'
    return render_template('Destination/about.html', db_status=db_status)

# New route for the public profile of sponsors
@main_bp.route('/public_profile', methods=['GET', 'POST'])
@login_required
def public_profile():
    if request.method == 'POST':
        # Retrieve and update sponsor details from form
        sponsor = current_user.sponsor  # Assuming current_user is linked to a Sponsor model
        sponsor.company_name = request.form['company_name']
        sponsor.location = request.form['location']
        sponsor.phone = request.form['phone']
        sponsor.email = request.form['email']
        sponsor.website = request.form['website']
        sponsor.bio = request.form['bio']
        db.session.commit()
        flash('Public profile updated successfully!', 'success')
        return redirect(url_for('main.public_profile'))
    
    sponsor = current_user.sponsor
    return render_template('sponsor/public_profile.html', sponsor=sponsor)

# New route for sponsor job postings
@main_bp.route('/job_postings', methods=['GET', 'POST'])
@login_required
def job_postings():
    if request.method == 'POST':
        # Create new job posting from form
        new_job = JobPosting(
            title=request.form['title'],
            description=request.form['description'],
            location=request.form['location'],
            salary=request.form['salary'],
            hours=request.form['hours'],
            experience=request.form['experience'],
            sponsor_id=current_user.sponsor.id
        )
        db.session.add(new_job)
        db.session.commit()
        flash('Job posting created successfully!', 'success')
        return redirect(url_for('main.job_postings'))
    
    jobs = JobPosting.query.filter_by(sponsor_id=current_user.sponsor.id).all()
    return render_template('sponsor/job_postings.html', jobs=jobs)


# Authentication check helper function
def is_token_valid(token):
    try:
        decoded = jwt.decode(token, options={"verify_signature": False})
        return True
    except jwt.ExpiredSignatureError:
        return False
    except jwt.InvalidTokenError:
        return False
    
@main_bp.route('/manage_users')
@login_required
def manage_users():
    return render_template('admin/manage_users.html')

@main_bp.route('/review-reports')
@login_required
def review_reports():
    return render_template('admin/review_reports.html')

@main_bp.route('/add-users')
@login_required
def add_users():
    return render_template('admin/add_users.html')

@main_bp.route('/admin-reports')
@login_required
def admin_reports():
    return render_template('admin/admin_reports.html')

@main_bp.route('/approve-applications')
@login_required
def approve_applications():
    return render_template('partials/approve_applications.html')

@main_bp.route('/sponsor/product-catalog')
@login_required
def sponsor_product_catalog():
    return render_template('partials/product_catalog.html')

@main_bp.route('/participating-drivers')
@login_required
def participating_drivers():
    return render_template('partials/participating_drivers.html')

@main_bp.route('/driver/points')
@login_required
def view_points():
    return render_template('partials/view_points.html')  # Ensure this template exists

@main_bp.route('/driver/redeem-rewards')
@login_required
def redeem_rewards():
    return render_template('partials/redeem_rewards.html')  # Ensure this template exists

@main_bp.route('/driver/product-catalog')
@login_required
def driver_product_catalog():
    return render_template('partials/product_catalog.html')  # Ensure this template exists

@main_bp.route('/driver/review-purchases')
@login_required
def review_purchases():
    return render_template('partials/review_purchases.html')  # Ensure this template exists

================
File: driverProgram/Static/CSS/style.css
================
/* General Styles */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    line-height: 1.6;
    background-color: #f4f4f4;
    height: 100vh;
    overflow: hidden;  /* Prevent body from scrolling */
}

header {
    background-color: #333;
    color: white;
    padding: 15px;
    text-align: center;
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 1000;
}

header h1 {
    margin: 0;
    font-size: 24px;
}

/* Sidebar Menu */
.sidebar-menu {
    width: 250px;
    background-color: #333;
    color: white;
    height: 100vh;  /* Full height */
    padding-top: 20px;
    position: relative;  /* Change to relative */
    overflow-y: auto;  /* Enable scrolling inside the sidebar if needed */
}

.sidebar-menu ul {
    list-style: none;
    padding: 0;
}

.sidebar-menu ul li {
    padding: 15px 20px;
    cursor: pointer;
}

.sidebar-menu ul li:hover {
    background-color: #444;
}

.sidebar-menu ul li a {
    color: white;
    text-decoration: none;
    display: block;
    transition: color 0.3s ease;
}

.sidebar-menu ul li a:hover {
    color: #ddd;
}

/* Dashboard Container */
.dashboard-container {
    display: flex;
    height: 100vh;  /* Take up full height */
    overflow: hidden;  /* Prevent container from scrolling separately */
}

.content-area {
    flex-grow: 1;
    padding: 20px;
    background-color: #fff;
    overflow-y: auto;  /* Allow main content area to scroll */
    margin-left: 250px;  /* This matches the sidebar width */
}

/* Buttons */
.button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.button:hover {
    background-color: #0056b3;
}

/* Responsive Design */
@media (max-width: 768px) {
    .sidebar-menu {
        width: 100%;
        height: auto;
        position: relative;
    }

    .content-area {
        margin-left: 0;
        width: 100%;
    }

    .sidebar-menu ul {
        display: flex;
        flex-direction: row;
        justify-content: space-around;
    }

    .sidebar-menu ul li {
        padding: 10px;
    }
}

================
File: driverProgram/Static/JS/app.js
================
document.addEventListener('DOMContentLoaded', () => {
    console.log('Frontend Loaded');
});

================
File: driverProgram/Static/JS/signup.js
================
document.addEventListener("DOMContentLoaded", function () {
    const passwordField = document.getElementById("password");
    const confirmPasswordField = document.getElementById("confirm_password");
    const submitButton = document.getElementById("submit-button");

    // Enable submit button only if passwords match
    alert("Test");
    function validatePassword() {
        alert("Test");
        if (passwordField.value === confirmPasswordField.value && passwordField.value != "") {
            alert("Submit = " && submitButton.disabled);
            submitButton.disabled = false;
            alert("Submit = " && submitButton.disabled);
        } else {
            alert("Submit = " && submitButton.disabled);
            submitButton.disabled = true;
            alert("Submit = " && submitButton.disabled);
        }
    }

    passwordField.addEventListener("input", validatePassword);
    confirmPasswordField.addEventListener("input", validatePassword);
});

================
File: driverProgram/templates/admin/add_users.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Users</title>
</head>
<body>
    <section>
        <h2>Add New Users</h2>
        <p>Add new Admins, Drivers, or Sponsor users to the system.</p>
        <!-- Add form for adding new users -->
    </section>
</body>
</html>

================
File: driverProgram/templates/admin/admin_reports.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generate Admin Reports</title>
</head>
<body>
    <section>
        <h2>Generate Reports</h2>
        <p>Generate and download system reports for administrative purposes.</p>
        <!-- Add form or button for generating reports -->
    </section>
</body>
</html>

================
File: driverProgram/templates/admin/manage_users.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Users</title>
</head>
<body>
    <section>
        <h2>Manage Users</h2>
        <p>Here you can view, update, or remove admin, driver, and sponsor users.</p>
        <!-- Add table or management system to view and manage users -->
    </section>
</body>
</html>

================
File: driverProgram/templates/admin/review_reports.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Review Reports</title>
</head>
<body>
    <section>
        <h2>Review Reports</h2>
        <p>Access detailed reports regarding user activity, system performance, and more.</p>
        <!-- Add report review interface -->
    </section>
</body>
</html>

================
File: driverProgram/templates/dashboard/admin_dash.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>

    <!-- Google Fonts for Professional Typography -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

    <!-- Font Awesome for Icons -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

    <style>
        /* General Body Styling */
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #1a1a1a; /* Dark background */
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            color: #fff; /* Text color white */
            overflow-x: hidden;
        }

        /* Top Navigation Bar */
        nav.top-nav {
            background-color: #0b3d91; /* Dark Blue for the Navbar */
            color: white;
            padding: 10px 30px;
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 1000;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        nav.top-nav ul {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            align-items: center;
        }

        nav.top-nav ul li {
            margin-left: 30px;
        }

        nav.top-nav ul li a {
            color: white;
            text-decoration: none;
            font-size: 1.1em;
            font-weight: 500;
            padding: 10px;
            transition: background-color 0.3s;
        }

        nav.top-nav ul li a:hover {
            background-color: #274c9d;
            border-radius: 5px;
        }

        /* Container for Sidebar and Content */
        .container {
            display: flex;
            margin-top: 60px; /* Offset for top nav */
            height: 100%;
        }

        /* Sidebar Styling */
        .sidebar-menu {
            background-color: #2b2b2b; /* Darker sidebar */
            color: #fff;
            padding-top: 20px;
            width: 250px;
            height: calc(100vh - 60px); /* Adjust height with top nav */
            transition: all 0.3s ease;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        }

        .sidebar-menu.collapsed {
            width: 70px;
        }

        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu ul li {
            padding: 15px 20px;
            display: flex;
            align-items: center;
            white-space: nowrap;
            overflow: hidden;
        }

        .sidebar-menu ul li a {
            color: #fff;
            text-decoration: none;
            font-size: 1.1em;
            display: flex;
            align-items: center;
            transition: color 0.3s;
        }

        .sidebar-menu ul li a:hover {
            background-color: #3e3e3e;
            border-radius: 8px;
        }

        .sidebar-menu ul li a i {
            margin-right: 10px;
            font-size: 1.2em;
        }

        .sidebar-menu.collapsed ul li a span {
            display: none;
        }

        /* Sidebar Toggle */
        .sidebar-toggle {
            padding: 10px;
            background-color: #0b3d91;
            border: none;
            color: white;
            position: fixed;
            top: 70px;
            left: 260px;
            font-size: 20px;
            cursor: pointer;
            z-index: 1001;
            transition: left 0.3s ease;
        }

        .collapsed + .sidebar-toggle {
            left: 90px;
        }

        /* Main Content Area */
        .content-area {
            margin-left: 250px;
            padding: 40px;
            flex-grow: 1;
            background-color: #333; /* Dark content background */
            color: #fff;
            border-radius: 10px;
            margin: 20px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            overflow-y: auto;
            height: calc(100vh - 110px); /* Full height minus nav and padding */
            transition: margin-left 0.3s ease;
        }

        .collapsed + .content-area {
            margin-left: 90px;
        }

        h2 {
            margin-top: 0;
            font-size: 2em;
            font-weight: 500;
            color: #4a90e2; /* Lighter blue for headers */
        }

        p {
            line-height: 1.8;
            font-size: 1.1em;
            color: #d4d4d4;
        }

        /* Sidebar collapsed state */
        .sidebar-menu.collapsed ul li a i {
            font-size: 1.6em;
            margin-right: 0;
            text-align: center;
            width: 100%;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar-menu {
                width: 200px;
            }

            .collapsed + .sidebar-toggle {
                left: 80px;
            }

            .content-area {
                margin-left: 200px;
            }
        }

        @media (max-width: 480px) {
            nav.top-nav ul li {
                margin: 0 5px;
            }

            .sidebar-menu {
                width: 150px;
            }

            .collapsed + .sidebar-toggle {
                left: 70px;
            }

            .content-area {
                margin-left: 150px;
            }
        }
    </style>
</head>
<body>

    <!-- Top Navigation Bar -->
    <nav class="top-nav">
        <ul>
            <li><a href="{{ url_for('main.destination') }}">Home</a></li>
            <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
            <li><a href="{{ url_for('main.about') }}">About</a></li>
            {% if current_user.is_authenticated %}
                <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
            {% endif %}
        </ul>
        <ul>
            <li><a href="{{ url_for('main.profile') }}">Profile</a></li>
        </ul>
    </nav>

    <!-- Container for Sidebar and Content -->
    <div class="container">
        <!-- Sidebar Menu -->
        <nav class="sidebar-menu" id="sidebar">
            <ul>
                <li><a href="#" onclick="loadContent('{{ url_for('main.manage_users') }}')"><i class="fas fa-users-cog"></i><span>Manage Users</span></a></li>
                <li><a href="#" onclick="loadContent('{{ url_for('main.review_reports') }}')"><i class="fas fa-chart-line"></i><span>Review Reports</span></a></li>
                <li><a href="#" onclick="loadContent('{{ url_for('main.add_users') }}')"><i class="fas fa-user-plus"></i><span>Add New Users</span></a></li>
                <li><a href="#" onclick="loadContent('{{ url_for('main.admin_reports') }}')"><i class="fas fa-file-alt"></i><span>Generate Reports</span></a></li>
            </ul>
        </nav>

        <!-- Sidebar Toggle Button -->
        <button class="sidebar-toggle" id="sidebarToggle"><i class="fas fa-bars"></i></button>

        <!-- Main Content Area -->
        <main class="content-area">
            <section id="dashboard-content">
                <h2>Welcome to the Admin Dashboard</h2>
                <p>Manage users, review reports, and perform administrative tasks here.</p>
            </section>
        </main>
    </div>

    <script>
        // Toggle the sidebar on and off
        const sidebar = document.getElementById('sidebar');
        const sidebarToggle = document.getElementById('sidebarToggle');
        const contentArea = document.querySelector('.content-area');

        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.toggle('collapsed');
            sidebarToggle.classList.toggle('collapsed');
            contentArea.classList.toggle('collapsed');
        });

        function loadContent(url) {
            console.log("Loading content from:", url);

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(html => {
                    document.getElementById('dashboard-content').innerHTML = html;
                })
                .catch(err => {
                    console.error('Error loading content:', err);
                });
        }
    </script>

</body>
</html>

================
File: driverProgram/templates/dashboard/driver_dash.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Driver Dashboard</title>

    <!-- Google Fonts for Professional Typography -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

    <!-- Font Awesome for Icons -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

    <style>
        /* General Body Styling */
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #1a1a1a; /* Dark background */
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            color: #fff;
            overflow-x: hidden;
        }

        /* Top Navigation Bar */
        nav.top-nav {
            background-color: #0b3d91; /* Dark Blue for the Navbar */
            color: white;
            padding: 10px 30px;
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 1000;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        /* Top Nav Container */
        nav.top-nav ul {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            gap: 30px; /* Ensure spacing between each link */
        }

        /* Left nav alignment */
        nav.top-nav ul.left-nav {
            flex: 1; /* Takes available space on the left */
        }

        /* Right nav alignment */
        nav.top-nav ul.right-nav {
            flex: 0;
            margin-right: 30px; /* Margin to ensure it doesn't touch screen edge */
        }

        nav.top-nav ul li {
            margin: 0;
        }

        nav.top-nav ul li a {
            color: white;
            text-decoration: none;
            font-size: 1.1em;
            font-weight: 500;
            padding: 10px;
            transition: background-color 0.3s;
        }

        nav.top-nav ul li a:hover {
            background-color: #274c9d;
            border-radius: 5px;
        }

        /* Container for Sidebar and Content */
        .container {
            display: flex;
            margin-top: 60px; /* Offset for top nav */
            height: 100%;
        }

        /* Sidebar Styling */
        .sidebar-menu {
            background-color: #2b2b2b; /* Darker sidebar */
            color: #fff;
            padding-top: 20px;
            width: 250px;
            height: calc(100vh - 60px); /* Adjust height with top nav */
            transition: all 0.3s ease;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        }

        .sidebar-menu.collapsed {
            width: 70px;
        }

        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu ul li {
            padding: 15px 20px;
            display: flex;
            align-items: center;
            white-space: nowrap;
            overflow: hidden;
            transition: background-color 0.3s ease;
        }

        .sidebar-menu ul li:hover {
            background-color: #3e3e3e;
        }

        .sidebar-menu ul li a {
            color: #fff;
            text-decoration: none;
            font-size: 1.1em;
            display: flex;
            align-items: center;
            transition: color 0.3s;
        }

        .sidebar-menu ul li a i {
            margin-right: 10px;
            font-size: 1.4em;
        }

        .sidebar-menu ul li a span {
            display: inline-block;
            opacity: 1;
            transition: opacity 0.3s ease;
        }

        .sidebar-menu.collapsed ul li a span {
            opacity: 0;
        }

        /* Sidebar Toggle */
        .sidebar-toggle {
            padding: 10px;
            background-color: #0b3d91;
            border: none;
            color: white;
            position: fixed;
            top: 70px;
            left: 260px;
            font-size: 20px;
            cursor: pointer;
            z-index: 1001;
            transition: left 0.3s ease;
            display: flex;
            align-items: center;
        }

        .collapsed + .sidebar-toggle {
            left: 90px;
        }

        .sidebar-toggle i {
            margin-right: 10px;
        }

        /* Main Content Area */
        .content-area {
            margin-left: 250px;
            padding: 40px;
            flex-grow: 1;
            background-color: #333; /* Dark content background */
            color: #fff;
            border-radius: 10px;
            margin: 20px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            overflow-y: auto;
            height: calc(100vh - 110px); /* Full height minus nav and padding */
            transition: margin-left 0.3s ease;
        }

        .collapsed + .content-area {
            margin-left: 90px;
        }

        h2 {
            margin-top: 0;
            font-size: 2em;
            font-weight: 500;
            color: #4a90e2; /* Lighter blue for headers */
        }

        p {
            line-height: 1.8;
            font-size: 1.1em;
            color: #d4d4d4;
        }

        /* Sidebar collapsed state */
        .sidebar-menu.collapsed ul li a i {
            font-size: 1.6em;
            margin-right: 0;
            text-align: center;
            width: 100%;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar-menu {
                width: 200px;
            }

            .collapsed + .sidebar-toggle {
                left: 80px;
            }

            .content-area {
                margin-left: 200px;
            }
        }

        @media (max-width: 480px) {
            nav.top-nav ul li {
                margin: 0 5px;
            }

            .sidebar-menu {
                width: 150px;
            }

            .collapsed + .sidebar-toggle {
                left: 70px;
            }

            .content-area {
                margin-left: 150px;
            }
        }
    </style>
</head>
<body>

    <!-- Top Navigation Bar -->
    <nav class="top-nav">
        <ul class="left-nav">
            <li><a href="{{ url_for('main.destination') }}">Home</a></li>
            <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
            <li><a href="{{ url_for('main.about') }}">About</a></li>
        </ul>
        <ul class="right-nav">
            {% if current_user.is_authenticated %}
                <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
            {% else %}
                <li><a href="{{ url_for('auth.login') }}">Login</a></li>
            {% endif %}
            <li><a href="{{ url_for('main.profile') }}">Profile</a></li>
        </ul>
    </nav>

    <!-- Container for Sidebar and Content -->
    <div class="container">
        <!-- Sidebar Menu -->
        <nav class="sidebar-menu" id="sidebar">
            <ul>
                <li><a href="#" onclick="loadContent('{{ url_for('main.view_points') }}')"><i class="fas fa-star"></i><span>View Points</span></a></li>
                <li><a href="#" onclick="loadContent('{{ url_for('main.redeem_rewards') }}')"><i class="fas fa-gift"></i><span>Redeem Rewards</span></a></li>
                <li><a href="#" onclick="loadContent('{{ url_for('main.driver_product_catalog') }}')"><i class="fas fa-box"></i><span>Browse Sponsor Catalog</span></a></li>
                <li><a href="#" onclick="loadContent('{{ url_for('main.review_purchases') }}')"><i class="fas fa-shopping-cart"></i><span>Review Purchases</span></a></li>
            </ul>
        </nav>

        <!-- Sidebar Toggle Button -->
        <button class="sidebar-toggle" id="sidebarToggle"><i class="fas fa-bars"></i><span>Menu</span></button>

        <!-- Main Content Area -->
        <main class="content-area">
            <section id="dashboard-content">
                <h2>Welcome to the Driver Dashboard</h2>
                <p>View and manage your profile, points, rewards, and purchases here.</p>
            </section>
        </main>
    </div>

    <script>
        // Toggle the sidebar on and off
        const sidebar = document.getElementById('sidebar');
        const sidebarToggle = document.getElementById('sidebarToggle');
        const contentArea = document.querySelector('.content-area');

        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.toggle('collapsed');
            sidebarToggle.classList.toggle('collapsed');
            contentArea.classList.toggle('collapsed');
        });

        function loadContent(url) {
            console.log("Loading content from:", url);

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(html => {
                    document.getElementById('dashboard-content').innerHTML = html;
                })
                .catch(err => {
                    console.error('Error loading content:', err);
                });
        }
    </script>

</body>
</html>

================
File: driverProgram/templates/dashboard/sponsor_dash.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sponsor Dashboard</title>

    <!-- Google Fonts for Professional Typography -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

    <!-- Font Awesome for Icons -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

    <style>
        /* General Body Styling */
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #1a1a1a; /* Dark background */
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            color: #fff;
            overflow-x: hidden;
        }

        /* Top Navigation Bar */
        nav.top-nav {
            background-color: #0b3d91; /* Dark Blue for the Navbar */
            color: white;
            padding: 10px 30px;
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 1000;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        nav.top-nav ul {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            align-items: center;
        }

        nav.top-nav ul li {
            margin-left: 30px;
        }

        nav.top-nav ul li a {
            color: white;
            text-decoration: none;
            font-size: 1.1em;
            font-weight: 500;
            padding: 10px;
            transition: background-color 0.3s;
        }

        nav.top-nav ul li a:hover {
            background-color: #274c9d;
            border-radius: 5px;
        }

        /* Container for Sidebar and Content */
        .container {
            display: flex;
            margin-top: 60px; /* Offset for top nav */
            height: 100%;
        }

        /* Sidebar Styling */
        .sidebar-menu {
            background-color: #2b2b2b; /* Darker sidebar */
            color: #fff;
            padding-top: 20px;
            width: 250px;
            height: calc(100vh - 60px); /* Adjust height with top nav */
            transition: all 0.3s ease;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        }

        .sidebar-menu.collapsed {
            width: 70px;
        }

        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu ul li {
            padding: 15px 20px;
            display: flex;
            align-items: center;
            white-space: nowrap;
            overflow: hidden;
        }

        .sidebar-menu ul li a {
            color: #fff;
            text-decoration: none;
            font-size: 1.1em;
            display: flex;
            align-items: center;
            transition: color 0.3s;
        }

        .sidebar-menu ul li a:hover {
            background-color: #3e3e3e;
            border-radius: 8px;
        }

        .sidebar-menu ul li a i {
            margin-right: 10px;
            font-size: 1.2em;
        }

        .sidebar-menu.collapsed ul li a span {
            display: none;
        }

        /* Sidebar Toggle */
        .sidebar-toggle {
            padding: 10px;
            background-color: #0b3d91;
            border: none;
            color: white;
            position: fixed;
            top: 70px;
            left: 260px;
            font-size: 20px;
            cursor: pointer;
            z-index: 1001;
            transition: left 0.3s ease;
        }

        .collapsed + .sidebar-toggle {
            left: 90px;
        }

        /* Main Content Area */
        .content-area {
            margin-left: 250px;
            padding: 40px;
            flex-grow: 1;
            background-color: #333; /* Dark content background */
            color: #fff;
            border-radius: 10px;
            margin: 20px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            overflow-y: auto;
            height: calc(100vh - 110px); /* Full height minus nav and padding */
            transition: margin-left 0.3s ease;
        }

        .collapsed + .content-area {
            margin-left: 90px;
        }

        h2 {
            margin-top: 0;
            font-size: 2em;
            font-weight: 500;
            color: #4a90e2; /* Lighter blue for headers */
        }

        p {
            line-height: 1.8;
            font-size: 1.1em;
            color: #d4d4d4;
        }

        /* Sidebar collapsed state */
        .sidebar-menu.collapsed ul li a i {
            font-size: 1.6em;
            margin-right: 0;
            text-align: center;
            width: 100%;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar-menu {
                width: 200px;
            }

            .collapsed + .sidebar-toggle {
                left: 80px;
            }

            .content-area {
                margin-left: 200px;
            }
        }

        @media (max-width: 480px) {
            nav.top-nav ul li {
                margin: 0 5px;
            }

            .sidebar-menu {
                width: 150px;
            }

            .collapsed + .sidebar-toggle {
                left: 70px;
            }

            .content-area {
                margin-left: 150px;
            }
        }
    </style>
</head>
<body>

    <!-- Top Navigation Bar -->
    <nav class="top-nav">
        <ul>
            <li><a href="{{ url_for('main.destination') }}">Home</a></li>
            <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
            <li><a href="{{ url_for('main.about') }}">About</a></li>
            {% if current_user.is_authenticated %}
                <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
            {% endif %}
        </ul>
        <ul>
            <li><a href="{{ url_for('main.profile') }}">Profile</a></li>
        </ul>
    </nav>

    <!-- Container for Sidebar and Content -->
    <div class="container">
        <!-- Sidebar Menu -->
        <nav class="sidebar-menu" id="sidebar">
            <ul>
                <li><a onclick="loadContent('{{ url_for('main.approve_applications') }}')"><i class="fas fa-check-circle"></i><span>Approve Applications</span></a></li>
                <li><a onclick="loadContent('{{ url_for('main.sponsor_product_catalog') }}')"><i class="fas fa-box"></i><span>Product Catalog</span></a></li>
                <li><a onclick="loadContent('{{ url_for('main.participating_drivers') }}')"><i class="fas fa-users"></i><span>Participating Drivers</span></a></li>
                <li><a onclick="loadContent('{{ url_for('main.public_profile') }}')"><i class="fas fa-building"></i><span>Public Profile</span></a></li>
                <li><a onclick="loadContent('{{ url_for('main.job_postings') }}')"><i class="fas fa-briefcase"></i><span>Job Postings</span></a></li>
            </ul>
        </nav>

        <!-- Sidebar Toggle Button -->
        <button class="sidebar-toggle" id="sidebarToggle"><i class="fas fa-bars"></i></button>

        <!-- Main Content Area -->
        <main class="content-area">
            <section id="dashboard-content">
                <h2>Welcome to the Sponsor Dashboard</h2>
                <p>This is where you can manage applications, view drivers, and manage your product catalog.</p>
            </section>
        </main>
    </div>

    <script>
        // Toggle the sidebar on and off
        const sidebar = document.getElementById('sidebar');
        const sidebarToggle = document.getElementById('sidebarToggle');
        const contentArea = document.querySelector('.content-area');

        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.toggle('collapsed');
            sidebarToggle.classList.toggle('collapsed');
            contentArea.classList.toggle('collapsed');
        });

        function loadContent(url) {
            console.log("Loading content from:", url);

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(html => {
                    document.getElementById('dashboard-content').innerHTML = html;
                })
                .catch(err => {
                    console.error('Error loading content:', err);
                });
        }
    </script>

</body>
</html>

================
File: driverProgram/templates/Destination/about.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About Us - BigRig Bonuses</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body, html {
            height: 100%;
            font-family: 'Poppins', sans-serif;
            color: #fff;
            background-color: #1a1a1a; /* Dark background */
            overflow-x: hidden;
        }

        /* Fullscreen background image */
        .background-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('{{ url_for('static', filename='background.jpg') }}') no-repeat center center/cover;
            z-index: -1;
            filter: brightness(0.7); /* Darkens the background image slightly */
        }

        /* Navigation */
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 50px;
            background-color: rgba(0, 0, 0, 0.8); /* Transparent navbar */
            position: fixed;
            width: 100%;
            z-index: 10;
        }

        nav .logo {
            font-size: 1.8rem;
            font-weight: 600;
            color: #4a90e2; /* Accent color */
        }

        nav ul {
            list-style: none;
            display: flex;
        }

        nav ul li {
            margin-left: 30px;
        }

        nav ul li a {
            color: #fff;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 400;
            transition: color 0.3s;
        }

        nav ul li a:hover {
            color: #4a90e2;
        }

        /* Info icon */
        .info-icon {
            display: inline-block;
            cursor: pointer;
            position: relative;
        }

        /* Tooltip box */
        .info-box {
            display: none;
            position: absolute;
            background-color: #4a4a4a;
            color: #fff;
            padding: 10px;
            border-radius: 5px;
            top: 30px;
            right: 0;
            width: 200px;
            z-index: 11;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        }

        .info-box::after {
            content: '';
            position: absolute;
            top: -10px;
            right: 10px;
            border-width: 5px;
            border-style: solid;
            border-color: transparent transparent #4a4a4a transparent;
        }

        /* Show the info box on hover */
        .info-icon:hover .info-box {
            display: block;
        }

        /* Main Content Section */
        .main-content {
            padding: 150px 50px 80px;
            max-width: 1200px;
            margin: 0 auto;
            text-align: center;
        }

        .main-content h1 {
            font-size: 3rem;
            margin-bottom: 30px;
            text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
        }

        .main-content p {
            font-size: 1.2rem;
            margin-bottom: 50px;
            color: #d4d4d4;
            line-height: 1.6;
        }

        /* Founders Section */
        .founders-section {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
        }

        .founders-section h2 {
            font-size: 2rem;
            margin-bottom: 30px;
            color: #4a90e2;
        }

        .founder-card {
            background-color: #2b2b2b;
            width: 28%;
            padding: 30px;
            border-radius: 15px;
            margin: 20px;
            text-align: center;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s;
        }

        .founder-card:hover {
            transform: translateY(-10px);
        }

        .founder-card h3 {
            font-size: 1.5rem;
            margin-bottom: 10px;
        }

        .founder-card p {
            font-size: 1rem;
            color: #ccc;
        }

        /* Database Section */
        .db-status-section {
            margin-top: 50px;
        }
        
        .db-status-section h2 {
            font-size: 2rem;
            margin-bottom: 20px;
            color: #4a90e2;
        }
        
        /* Green bar for connected status */
        .db-status.connected {
            background-color: #28a745; /* Green */
            padding: 20px;
            border-radius: 10px;
            font-size: 1.2rem;
            color: #fff;
            text-align: center;
        }
        
        /* Red bar for disconnected status */
        .db-status.disconnected {
            background-color: #dc3545; /* Red */
            padding: 20px;
            border-radius: 10px;
            font-size: 1.2rem;
            color: #fff;
            text-align: center;
        }
        

        /* Footer */
        footer {
            background-color: #111;
            padding: 20px 0;
            text-align: center;
            color: #bbb;
            font-size: 0.9rem;
        }

        footer a {
            color: #4a90e2;
            text-decoration: none;
            transition: color 0.3s;
        }

        footer a:hover {
            color: #367bb7;
        }

        @media(max-width: 768px) {
            nav {
                padding: 20px;
            }

            nav ul li {
                margin-left: 20px;
            }

            .main-content h1 {
                font-size: 2.5rem;
            }

            .founder-card {
                width: 90%;
            }
        }
    </style>
</head>
<body>
    <!-- Background Image -->
    <div class="background-container"></div>

    <!-- Navigation -->
    <nav>
        <div class="logo">BigRig Bonuses</div>
        <ul>
            <li><a href="{{ url_for('main.destination') }}">Home</a></li>
            {% if current_user.is_authenticated %}
                <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
                <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
            {% else %}
                <li><a href="{{ url_for('auth.login') }}">Login</a></li>
                <li><a href="{{ url_for('auth.signup') }}">Signup</a></li>
            {% endif %}
            <li><a href="{{ url_for('main.about') }}">About</a></li>
        </ul>

        <!-- Information Icon with Tooltip -->
        <div class="info-icon">
            <img src="https://th.bing.com/th/id/OIP.1aOVt-QbiJrPm-8a2fn1TwHaHa?w=220&h=220&c=7&r=0&o=5&dpr=1.3&pid=1.7" alt="Info" width="20" height="20">
            <div class="info-box">
                <strong>Team 13:</strong><br>
                Sprint: 5<br>
                Version: 1.5<br>
                Date: 10/8/24
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="main-content">
        <h1>About Us</h1>
        <p>
            We are a group of passionate students from Clemson University's CPSC 4910 class, working together to create innovative solutions in the trucking industry.
            Our goal is to help drivers improve their skills, earn rewards, and enjoy their road to success.
        </p>

        <!-- Founders Section -->
        <div class="founders-section">
            <h2>Meet Your Founders</h2>
            <div class="founder-card">
                <h3>Gracie Hine</h3>
            </div>
            <div class="founder-card">
                <h3>Joshua Swanier</h3>
            </div>
            <div class="founder-card">
                <h3>Timmy Lam</h3>
            </div>
            <div class="founder-card">
                <h3>Kalyaan Srinivasan</h3>
            </div>
            <div class="founder-card">
                <h3>Dustin Sullivan</h3>
            </div>
        </div>

       <!-- Database Status Section -->
    <div class="db-status-section">
        <h2>Database Connection Status</h2>
        <div class="db-status {% if db_status == 'connected' %}connected{% else %}disconnected{% endif %}">
        {{ db_status == 'connected' and "Database is connected" or "Database is not connected" }}
    </div>
</div>

    </div>

    <!-- Footer -->
    <footer>
        <p>BigRig Bonuses<p>
    </footer>
</body>
</html>
>>>>>>> jswanie

================
File: driverProgram/templates/Destination/browse_organizations.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Browse Organizations</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='CSS/style.css') }}">
</head>
<body>
    <h1>Browse Organizations</h1>
</body>
</html>

================
File: driverProgram/templates/Destination/current_organization.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Current Organization</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='CSS/style.css') }}">
</head>
<body>
    <h1>Current Organization</h1>
</body>
</html>

================
File: driverProgram/templates/Destination/destination.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BigRig Bonuses - Drive Better, Earn More</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body, html {
            height: 100%;
            font-family: 'Poppins', sans-serif;
            color: #fff;
            background-color: #1a1a1a; /* Dark background */
            overflow-x: hidden;
        }

        /* Fullscreen background image */
        .background-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            background: url('https://th.bing.com/th/id/R.552be69380eee7993da89c385f7251c0?rik=X8RyTk6HNnqkSQ&riu=http%3a%2f%2fwww.aacc.edu%2fmedia%2fcollege%2fimages%2fareas-of-study%2fconstruction-and-trades%2ftruck-driving_shutterstock_10728025_1200x600-1.jpg&ehk=hTMaImWB0onRle%2fKP%2fzCFBBB9QGUybwAs8VF8lGD%2f3g%3d&risl=&pid=ImgRaw&r=0') no-repeat center center/cover;
            opacity: 0.5;
        }

        /* Navigation */
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 50px;
            background-color: transparent; /* Transparent navbar */
            position: fixed;
            width: 100%;
            z-index: 10; /* Set higher than -1 */
        }

        nav .logo {
            display: flex;
            align-items: center;
        }

        nav .logo img {
            height: 30px; /* Adjust the height of the logo image to fit */
            margin-right: 15px; /* Space between the image and text */
        }

        nav .logo span {
            font-size: 1.8rem;
            font-weight: 600;
            color: white; /* Accent color */
        }

        nav ul {
            list-style: none;
            display: flex;
        }

        nav ul li {
            margin-left: 30px;
        }

        nav ul li a {
            color: #fff;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 400;
            transition: color 0.3s;
        }

        nav ul li a:hover {
            color: #4a90e2;
        }

        /* Hero Section */
        .hero-section {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            text-align: center;
            position: relative;
            z-index: 2; /* Higher than -1 */
        }

        .hero-section h1 {
            font-size: 3.5rem;
            font-weight: 600;
            color: #fff;
            margin-bottom: 20px;
            text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
        }

        .hero-section p {
            font-size: 1.5rem;
            max-width: 700px;
            margin: 0 auto 40px;
            color: #d4d4d4;
        }

        .hero-section a.cta-button {
            padding: 15px 40px;
            background-color: #4a90e2;
            color: #fff;
            font-size: 1.2rem;
            text-transform: uppercase;
            border-radius: 30px;
            text-decoration: none;
            transition: background-color 0.3s;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }

        .hero-section a.cta-button:hover {
            background-color: #367bb7;
        }

        /* Features Section */
        .features-section {
            background-color: transparent;
            padding: 80px 0;
            position: relative;
            z-index: 1; /* Higher than -1 */
        }

        .features-container {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            max-width: 1200px;
            margin: 0 auto;
        }

        .feature-card {
            background-color: #2b2b2b;
            padding: 40px;
            border-radius: 15px;
            width: 30%;
            margin: 20px;
            text-align: center;
            transition: transform 0.3s;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
        }

        .feature-card:hover {
            transform: translateY(-10px);
        }

        .feature-card h2 {
            font-size: 1.8rem;
            color: #4a90e2;
            margin-bottom: 20px;
        }

        .feature-card p {
            font-size: 1rem;
            color: #ccc;
        }

        /* Footer */
        footer {
            background-color: #111;
            padding: 20px 0;
            text-align: center;
            color: #bbb;
            font-size: 0.9rem;
            z-index: -1; /* Higher than -1 */
            position: relative;
        }

        footer a {
            color: #4a90e2;
            text-decoration: none;
            transition: color 0.3s;
        }

        footer a:hover {
            color: #367bb7;
        }

        @media(max-width: 768px) {
            nav {
                padding: 20px;
            }

            nav ul li {
                margin-left: 20px;
            }

            .hero-section h1 {
                font-size: 2.5rem;
            }

            .hero-section p {
                font-size: 1.2rem;
            }

            .feature-card {
                width: 90%;
            }
        }
    </style>
</head>
<body>
    <!-- Background Image -->
    <div class="background-container"></div>

    <!-- Navigation -->
    <nav>
        <div class="logo">
            <span>BigRig Bonuses</span>
        </div>
        <ul>
            <li><a href="{{ url_for('main.destination') }}">Home</a></li>
            {% if current_user.is_authenticated %}
                <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
                <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
            {% else %}
                <li><a href="{{ url_for('auth.login') }}">Login</a></li>
                <li><a href="{{ url_for('auth.signup') }}">Signup</a></li>
            {% endif %}
            <li><a href="{{ url_for('main.about') }}">About</a></li>
        </ul>
    </nav>

    <!-- Hero Section -->
    <section class="hero-section">
        <h1>Drive Better, Earn More</h1>
        <p>Track your performance, redeem amazing rewards, and stay on top of your journey to becoming the best driver on the road.</p>
        <a href="{{ url_for('auth.signup') }}" class="cta-button">Join Now</a>
    </section>

    <!-- Features Section -->
    <section class="features-section">
        <div class="features-container">
            <div class="feature-card">
                <h2>Track Your Points</h2>
                <p>Monitor your performance and track your earned points towards exciting rewards.</p>
            </div>
            <div class="feature-card">
                <h2>Redeem Rewards</h2>
                <p>Browse through our catalog of rewards and use your points to claim amazing prizes.</p>
            </div>
            <div class="feature-card">
                <h2>Improve Your Skills</h2>
                <p>Earn more points by improving your driving skills and becoming a safer, more efficient driver.</p>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer>
        <p>BigRig Bonuses &copy; 2024</p>
    </footer>
</body>
</html>

================
File: driverProgram/templates/Destination/login.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        /* Flash messages styling */
        .flash-messages {
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 9999;
            width: 300px;
        }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
            color: white;
        }

        .alert-info {
            background-color: #2196f3; /* Blue for info */
        }

        /* General styles for the login form */
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #1a1a1a;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
        }

        .login-container {
            background-color: #2b2b2b;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
            width: 400px;
            text-align: center;
        }

        .login-container h2 {
            margin-bottom: 20px;
            font-size: 2rem;
        }

        .login-container input {
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            border: none;
            border-radius: 5px;
            background-color: #1a1a1a;
            color: #fff;
            font-size: 1rem;
        }

        .login-container input[type="submit"] {
            background-color: #4a90e2;
            cursor: pointer;
        }

        .login-container input[type="submit"]:hover {
            background-color: #367bb7;
        }

        .login-container a {
            color: #4a90e2;
            text-decoration: none;
            font-size: 0.9rem;
        }

        .login-container a:hover {
            color: #367bb7;
        }
    </style>
</head>
<body>

    <!-- Display flashed messages -->
    {% with messages = get_flashed_messages(with_categories=true) %}
      {% if messages %}
        <div class="flash-messages">
          {% for category, message in messages %}
            <div class="alert alert-{{ category }}">{{ message }}</div>
          {% endfor %}
        </div>
      {% endif %}
    {% endwith %}

    <!-- Login Form -->
    <div class="login-container">
        <h2>Login</h2>
        <form method="POST" action="{{ url_for('auth.login') }}">
            {{ form.hidden_tag() }}

            <p>
                {{ form.username.label }}<br>
                {{ form.username(size=32) }}<br>
                {% for error in form.username.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.password.label }}<br>
                {{ form.password(size=32) }}<br>
                {% for error in form.password.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>{{ form.submit() }}</p>
        </form>
        <p><a href="{{ url_for('auth.reset_request') }}">Forgot Password?</a></p>
    </div>

    <!-- Optional JavaScript to auto-hide flash messages -->
    <script>
        setTimeout(function() {
            let flashMessages = document.querySelector('.flash-messages');
            if (flashMessages) {
                flashMessages.style.display = 'none';
            }
        }, 5000); // Hide flash messages after 5 seconds
    </script>

</body>
</html>

================
File: driverProgram/templates/Destination/messages.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messages</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='CSS/style.css') }}">
</head>
<body>
    <h1>Messages</h1>
</body>
</html>

================
File: driverProgram/templates/Destination/signup.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Signup</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body, html {
            height: 100%;
            font-family: 'Poppins', sans-serif;
            color: #fff;
            background-color: #1a1a1a; /* Dark background */
            overflow-x: hidden;
            overflow-y: auto;
        }

        /* Fullscreen background image */
        .background-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('{{ url_for('static', filename='background.jpg') }}') no-repeat center center/cover;
            z-index: -1;
            filter: brightness(0.7); /* Darkens the background image slightly */
        }

        /* Navigation */
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 50px;
            background-color: rgba(0, 0, 0, 0.8); /* Transparent navbar */
            position: fixed;
            width: 100%;
            z-index: 10;
        }

        nav .logo {
            font-size: 1.8rem;
            font-weight: 600;
            color: #4a90e2; /* Accent color */
        }

        nav ul {
            list-style: none;
            display: flex;
        }

        nav ul li {
            margin-left: 30px;
        }

        nav ul li a {
            color: #fff;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 400;
            transition: color 0.3s;
        }

        nav ul li a:hover {
            color: #4a90e2;
        }

        /* Signup Form Container */
        .signup-container {
            padding: 150px 50px 80px;
            max-width: 800px;
            margin: 0 auto;
            background-color: rgba(43, 43, 43, 0.9); /* Darker background for the form */
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
        }

        .signup-container h2 {
            font-size: 2.5rem;
            margin-bottom: 20px;
            text-align: center;
            color: #4a90e2;
        }

        .signup-container p {
            margin-bottom: 20px;
        }

        label {
            font-size: 1rem;
            color: #ddd;
        }

        input, select {
            width: 100%;
            padding: 12px;
            margin-top: 5px;
            margin-bottom: 20px;
            background-color: #2b2b2b;
            border: 1px solid #4a90e2;
            color: #fff;
            border-radius: 5px;
        }

        .error {
            color: #dc3545;
            font-size: 0.9rem;
        }

        input[type="submit"] {
            background-color: #4a90e2;
            border: none;
            font-size: 1.1rem;
            color: #fff;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        input[type="submit"]:hover {
            background-color: #367bb7;
        }

        /* Footer */
        footer {
            background-color: #111;
            padding: 20px 0;
            text-align: center;
            color: #bbb;
            font-size: 0.9rem;
        }

        footer a {
            color: #4a90e2;
            text-decoration: none;
            transition: color 0.3s;
        }

        footer a:hover {
            color: #367bb7;
        }

        @media (max-width: 768px) {
            .signup-container {
                padding: 100px 20px 50px;
            }
        }
    </style>
</head>

<body>
    <!-- Background Image -->
    <div class="background-container"></div>

    <!-- Navigation Bar -->
    <nav>
        <div class="logo">BigRig Bonuses</div>
        <ul>
            <li><a href="{{ url_for('main.destination') }}">Home</a></li>
            <li><a href="{{ url_for('auth.login') }}">Login</a></li>
            <li><a href="{{ url_for('auth.signup') }}">Signup</a></li>
            <li><a href="{{ url_for('main.about') }}">About</a></li>
        </ul>
    </nav>

    <!-- Signup Form -->
    <div class="signup-container">
        <h2>Signup</h2>
        <form method="POST" action="{{ url_for('auth.signup') }}">
            {{ form.hidden_tag() }}

            <p>
                {{ form.first_name.label }}<br>
                {{ form.first_name(size=32) }}<br>
                {% for error in form.first_name.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.last_name.label }}<br>
                {{ form.last_name(size=32) }}<br>
                {% for error in form.last_name.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.address.label }}<br>
                {{ form.address(size=64) }}<br>
                {% for error in form.address.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.phone.label }}<br>
                {{ form.phone(size=20) }}<br>
                {% for error in form.phone.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.email.label }}<br>
                {{ form.email(size=64) }}<br>
                {% for error in form.email.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.username.label }}<br>
                {{ form.username(size=32) }}<br>
                {% for error in form.username.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.password.label }}<br>
                {{ form.password(size=32) }}<br>
                {% for error in form.password.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.confirm_password.label }}<br>
                {{ form.confirm_password(size=32) }}<br>
                {% for error in form.confirm_password.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.role.label }}<br>
                {{ form.role() }}<br>
                {% for error in form.role.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p id="sponsor-code-field" style="display: none;">
                {{ form.sponsor_code.label }}<br>
                {{ form.sponsor_code(size=6) }}<br>
                {% for error in form.sponsor_code.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.birthdate.label }}<br>
                {{ form.birthdate(size=32) }}<br>
                {% for error in form.birthdate.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.gender.label }}<br>
                {{ form.gender() }}<br>
                {% for error in form.gender.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </p>

            <p>
                {{ form.submit() }}
            </p>
        </form>
    </div>

    <!-- Footer -->
    <footer>
        <p>&copy; 2024 BigRig Bonuses
    </footer>

    <!-- Script to show/hide sponsor code -->
    <script>
        const roleSelect = document.querySelector('select[name="role"]');
        const sponsorCodeField = document.getElementById('sponsor-code-field');

        roleSelect.addEventListener('change', function() {
            sponsorCodeField.style.display = this.value === 'sponsor' ? 'block' : 'none';
        });

        window.addEventListener('DOMContentLoaded', () => {
            if (roleSelect.value === 'sponsor') {
                sponsorCodeField.style.display = 'block';
            }

================
File: driverProgram/templates/partials/approve_applications.html
================
<section>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            font-size: 16px;
        }
    
        table thead {
            background-color: #007bff;
            color: white;
        }
    
        table th, table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
    
        button {
            padding: 8px 12px;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-right: 5px;
        }
    
        .approve-btn {
            background-color: #28a745;
        }
    
        .reject-btn {
            background-color: #dc3545;
        }
    
        button:hover {
            opacity: 0.8;
        }
    </style>
    
    <h2>Approve Driver Applications</h2>
    <p>List of driver applications pending approval.</p>

    <table>
        <thead>
            <tr>
                <th>Driver Name</th>
                <th>Application Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for app in applications %}
            <tr>
                <td>{{ app.name }}</td>
                <td>{{ app.date }}</td>
                <td>{{ app.status }}</td>
                <td>
                    <button class="approve-btn" onclick="approveApplication({{ app.id }})">Approve</button>
                    <button class="reject-btn" onclick="rejectApplication({{ app.id }})">Reject</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>        
    </table>

    <script>
        function approveApplication(appId) {
            // Handle approval logic
            console.log('Approved Application ID:', appId);
        }

        function rejectApplication(appId) {
            // Handle rejection logic
            console.log('Rejected Application ID:', appId);
        }
    </script>
</section>

================
File: driverProgram/templates/partials/participating_drivers.html
================
<section>
    <h2>Participating Drivers</h2>
    <p>List of drivers participating in the sponsor's program.</p>

    <ul>
        {% for driver in drivers %}
        <li>{{ driver.name }} - {{ driver.company }}</li>
        {% endfor %}
    </ul>
</section>

================
File: driverProgram/templates/partials/product_catalog.html
================
<div class="content-area">
    <h2>Product Catalog</h2>

    <div class="product-grid">
        {% for product in products %}
        <div class="product-card">
            <img src="{{ product.image_url }}" alt="{{ product.name }}">
            <div class="product-info">
                <h3>{{ product.name }}</h3>
                <p>{{ product.description }}</p>
                <div class="price">{{ product.price }} Points</div>
                <button onclick="addToCart({{ product.id }})">Add to Cart</button>
            </div>
        </div>
        {% endfor %}
    </div>

    <script>
        function addToCart(productId) {
            // Handle add to cart logic
            console.log('Added Product ID:', productId);
        }
    </script>
</div>

================
File: driverProgram/templates/partials/redeem_rewards.html
================
<h2>Redeem Rewards</h2>
<p>Select from the list of rewards below to redeem your points.</p>

<ul>
    {% for reward in rewards %}
    <li><strong>{{ reward.name }}</strong> - {{ reward.points }} Points 
        <button onclick="redeemReward({{ reward.id }})">Redeem</button>
    </li>
    {% endfor %}
</ul>

<script>
    function redeemReward(rewardId) {
        // Handle reward redemption logic
        console.log('Redeemed Reward ID:', rewardId);
    }
</script>

================
File: driverProgram/templates/partials/review_purchases.html
================
<h2>Review Purchases</h2>
<p>Here is a list of your past and pending purchases:</p>

<ul>
    {% for purchase in purchases %}
    <li>
        <strong>{{ purchase.product_name }}</strong> - {{ purchase.status }}
        {% if purchase.status == 'Pending' %}
        <button onclick="cancelPurchase({{ purchase.id }})">Cancel</button>
        {% endif %}
    </li>
    {% endfor %}
</ul>

<script>
    function cancelPurchase(purchaseId) {
        // Handle purchase cancellation logic
        console.log('Cancelled Purchase ID:', purchaseId);
    }
</script>

================
File: driverProgram/templates/partials/view_points.html
================
<h2>Your Points</h2>
<p>You currently have <strong>{{ points }}</strong> points.</p>
<p>Your points can be used to redeem rewards from the sponsor's catalog.</p>

================
File: driverProgram/templates/password/reset_email.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Password Reset</title>
</head>
<body>
    <h1>Password Reset Request</h1>
    <p>To reset your password, visit the following link:</p>
    <a href="{{ url_for('reset_password', token=token, _external=True) }}">Reset Password</a>
</body>
</html>

================
File: driverProgram/templates/password/reset_password.html
================
{% extends "base.html" %}
{% block content %}
    <h2>Reset Your Password</h2>
    <form method="POST">
        {{ form.hidden_tag() }}
        <p>
            {{ form.email.label }}<br>
            {{ form.email(size=32) }}<br>
            {% for error in form.email.errors %}
                <span class="error">{{ error }}</span>
            {% endfor %}
        </p>
        <p>
            {{ form.verification_code.label }}<br>
            {{ form.verification_code(size=32) }}<br>
            {% for error in form.verification_code.errors %}
                <span class="error">{{ error }}</span>
            {% endfor %}
        </p>
        <p>
            {{ form.new_password.label }}<br>
            {{ form.new_password(size=32) }}<br>
            {% for error in form.new_password.errors %}
                <span class="error">{{ error }}</span>
            {% endfor %}
        </p>
        <p>
            {{ form.confirm_password.label }}<br>
            {{ form.confirm_password(size=32) }}<br>
            {% for error in form.confirm_password.errors %}
                <span class="error">{{ error }}</span>
            {% endfor %}
        </p>
        <p>{{ form.submit() }}</p>
    </form>
{% endblock %}

================
File: driverProgram/templates/password/reset_request.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body, html {
            height: 100%;
            font-family: 'Poppins', sans-serif;
            background-color: #1a1a1a; /* Dark background */
            color: #fff;
        }

        /* Navigation */
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 50px;
            background-color: rgba(0, 0, 0, 0.8); /* Transparent navbar */
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 10;
        }

        nav .logo {
            font-size: 1.8rem;
            font-weight: 600;
            color: #4a90e2;
        }

        nav ul {
            list-style: none;
            display: flex;
        }

        nav ul li {
            margin-left: 30px;
        }

        nav ul li a {
            color: #fff;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 400;
            transition: color 0.3s;
        }

        nav ul li a:hover {
            color: #4a90e2;
        }

        /* Form Container */
        .form-container {
            max-width: 500px;
            background-color: #2b2b2b;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            margin: 120px auto 0;
            color: #fff;
        }

        .form-container h2 {
            text-align: center;
            color: #4a90e2;
            margin-bottom: 1.5rem;
        }

        .form-container label {
            color: #4a90e2;
            font-weight: bold;
        }

        .form-container .form-control {
            background-color: #333;
            color: #fff;
            border-radius: 8px;
            border: 1px solid #555;
            padding: 0.75rem;
            width: 100%;
            margin-bottom: 1rem;
        }

        .form-container .form-control:focus {
            border-color: #4a90e2;
            outline: none;
            box-shadow: 0 0 0 0.25rem rgba(74, 144, 226, 0.5);
        }

        .form-container .error {
            color: #dc3545;
            font-size: 0.875rem;
        }

        .form-container .btn-submit {
            background-color: #4a90e2;
            color: #fff;
            padding: 0.75rem;
            border: none;
            border-radius: 8px;
            width: 100%;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .form-container .btn-submit:hover {
            background-color: #367bb7;
        }
    </style>
</head>
<body>

    <!-- Navigation -->
    <nav>
        <div class="logo">BigRig Bonuses</div>
        <ul>
            <li><a href="{{ url_for('main.destination') }}">Home</a></li>
            <li><a href="{{ url_for('main.about') }}">About</a></li>
            {% if current_user.is_authenticated %}
                <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
            {% else %}
                <li><a href="{{ url_for('auth.login') }}">Login</a></li>
            {% endif %}
        </ul>
    </nav>

    <!-- Reset Password Form -->
    <div class="form-container">
        <h2>Reset Password</h2>
        <form method="POST" action="{{ url_for('auth.reset_request') }}">
            {{ form.hidden_tag() }}
            <div class="form-group">
                {{ form.email.label }}<br>
                {{ form.email(class="form-control") }}<br>
                {% for error in form.email.errors %}
                    <span class="error">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="form-group">
                {{ form.submit(class="btn-submit") }}
            </div>
        </form>
    </div>

</body>
</html>

================
File: driverProgram/templates/password/verify.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verify Account</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body, html {
            height: 100%;
            font-family: 'Poppins', sans-serif;
            background-color: #1a1a1a; /* Dark background */
            color: #fff;
        }

        /* Navigation */
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 50px;
            background-color: rgba(0, 0, 0, 0.8); /* Transparent navbar */
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 10;
        }

        nav .logo {
            font-size: 1.8rem;
            font-weight: 600;
            color: #4a90e2;
        }

        nav ul {
            list-style: none;
            display: flex;
        }

        nav ul li {
            margin-left: 30px;
        }

        nav ul li a {
            color: #fff;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 400;
            transition: color 0.3s;
        }

        nav ul li a:hover {
            color: #4a90e2;
        }

        /* Form Container */
        .form-container {
            max-width: 500px;
            background-color: #2b2b2b;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            margin: 120px auto 0;
            color: #fff;
        }

        .form-container h1 {
            text-align: center;
            color: #4a90e2;
            margin-bottom: 1.5rem;
        }

        .form-container label {
            color: #4a90e2;
            font-weight: bold;
        }

        .form-container input[type="text"] {
            background-color: #333;
            color: #fff;
            border-radius: 8px;
            border: 1px solid #555;
            padding: 0.75rem;
            width: 100%;
            margin-bottom: 1rem;
        }

        .form-container input[type="text"]:focus {
            border-color: #4a90e2;
            outline: none;
            box-shadow: 0 0 0 0.25rem rgba(74, 144, 226, 0.5);
        }

        .form-container button {
            background-color: #4a90e2;
            color: #fff;
            padding: 0.75rem;
            border: none;
            border-radius: 8px;
            width: 100%;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .form-container button:hover {
            background-color: #367bb7;
        }

        .form-container .flash-messages {
            margin-top: 1rem;
            list-style: none;
            padding: 0;
        }

        .form-container .flash-messages li {
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 5px;
        }

        .form-container .flash-messages li.success {
            background-color: #28a745;
            color: #fff;
        }

        .form-container .flash-messages li.error {
            background-color: #dc3545;
            color: #fff;
        }
    </style>
</head>
<body>

    <!-- Navigation -->
    <nav>
        <div class="logo">BigRig Bonuses</div>
        <ul>
            <li><a href="{{ url_for('main.destination') }}">Home</a></li>
            <li><a href="{{ url_for('main.about') }}">About</a></li>
            {% if current_user.is_authenticated %}
                <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
            {% else %}
                <li><a href="{{ url_for('auth.login') }}">Login</a></li>
            {% endif %}
        </ul>
    </nav>

    <!-- Verify Account Form -->
    <div class="form-container">
        <h1>Verify Your Account</h1>
        <form method="POST" action="{{ url_for('auth.verify') }}">
            <div>
                <label for="username">Username</label>
                <input type="text" name="username" required>
            </div>
            <div>
                <label for="verification_code">Verification Code</label>
                <input type="text" name="verification_code" required>
            </div>
            <button type="submit">Verify Account</button>
        </form>

        <!-- Flash Messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                <ul class="flash-messages">
                    {% for category, message in messages %}
                        <li class="{{ category }}">{{ message }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        {% endwith %}
    </div>

</body>
</html>

================
File: driverProgram/templates/sponsor/job_postings.html
================
{% extends 'base.html' %}

{% block content %}
<h2>Job Postings</h2>
<button onclick="document.getElementById('new-job-form').style.display='block'">Create New Job Posting</button>

<!-- Form for creating a new job posting -->
<div id="new-job-form" style="display:none;">
    <form method="POST">
        <label for="title">Job Title</label>
        <input type="text" id="title" name="title" required>

        <label for="description">Job Description</label>
        <textarea id="description" name="description" required></textarea>

        <label for="location">Location</label>
        <input type="text" id="location" name="location" required>

        <label for="salary">Salary</label>
        <input type="text" id="salary" name="salary" required>

        <label for="hours">Required Hours</label>
        <select id="hours" name="hours" required>
            <option value="Full-time">Full-time</option>
            <option value="Part-time">Part-time</option>
        </select>

        <label for="experience">Experience</label>
        <input type="text" id="experience" name="experience" required>

        <button type="submit">Post Job</button>
    </form>
</div>

<!-- Display existing job postings -->
<ul>
    {% for job in jobs %}
    <li>{{ job.title }} - {{ job.location }} - {{ job.salary }}</li>
    {% endfor %}
</ul>
{% endblock %}

================
File: driverProgram/templates/sponsor/public_profile.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Public Profile</title>

    <!-- Google Fonts for Professional Typography -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

    <!-- Font Awesome for Icons (optional) -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

    <style>
        /* General Styling */
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #1a1a1a; /* Dark background */
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            color: #fff;
            overflow-x: hidden;
        }

        /* Container for Form */
        .form-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
            padding: 20px;
        }

        /* Form Styling */
        form {
            background-color: #333; /* Darker background for form */
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            width: 100%; /* Full width */
            max-width: 600px; /* Limit max width */
            color: #fff;
        }

        h2 {
            font-size: 1.8em;
            color: #4a90e2; /* Light blue */
            text-align: center;
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 10px;
            color: #d4d4d4;
            font-weight: 600;
        }

        input[type="text"],
        input[type="email"],
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: none;
            border-radius: 5px;
            background-color: #2b2b2b;
            color: #fff;
            box-sizing: border-box; /* Ensure padding doesn't affect width */
        }

        textarea {
            resize: vertical;
            height: 100px;
        }

        button {
            width: 100%;
            padding: 10px;
            background-color: #0b3d91;
            color: #fff;
            border: none;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        button:hover {
            background-color: #274c9d;
        }

        /* Responsive */
        @media (max-width: 768px) {
            form {
                width: 100%; /* Use full width for smaller screens */
                padding: 20px;
            }
        }
    </style>
</head>
<body>

    <div class="form-container">
        <form method="POST">
            <h2>Edit Public Profile</h2>

            <label for="company_name">Company Name</label>
            <input type="text" id="company_name" name="company_name" value="{{ sponsor.company_name }}">

            <label for="location">Location</label>
            <input type="text" id="location" name="location" value="{{ sponsor.location }}">

            <label for="phone">Phone Number</label>
            <input type="text" id="phone" name="phone" value="{{ sponsor.phone }}">

            <label for="email">Email</label>
            <input type="email" id="email" name="email" value="{{ sponsor.email }}">

            <label for="website">Website</label>
            <input type="text" id="website" name="website" value="{{ sponsor.website }}">

            <label for="bio">Bio</label>
            <textarea id="bio" name="bio">{{ sponsor.bio }}</textarea>

            <button type="submit">Save</button>
        </form>
    </div>

</body>
</html>

================
File: driverProgram/templates/base.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title if title else "BigRig Bonuses" }}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <style>
        /* General Styling */
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #1a1a1a; /* Dark background */
            color: white; /* White text */
            margin: 0;
            padding: 0;
        }

        /* Navigation Bar Styling */
        nav {
            background-color: #0b3d91; /* Dark blue navbar */
            color: white;
            padding: 15px 50px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: fixed;
            width: 100%;
            z-index: 1000;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        nav ul {
            list-style-type: none;
            display: flex;
            gap: 30px;
            margin: 0;
            padding: 0;
        }

        nav ul li {
            display: inline;
        }

        nav a {
            color: white;
            text-decoration: none;
            font-size: 1.1rem;
            padding: 10px;
            transition: background-color 0.3s ease;
        }

        nav a:hover {
            background-color: #274c9d; /* Slightly lighter blue on hover */
            border-radius: 5px;
        }

        /* Container Styling */
        .container {
            max-width: 800px;
            margin: 100px auto 20px; /* Top margin ensures content is below nav */
            padding: 20px;
            background-color: #333; /* Dark content background */
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            color: #d4d4d4; /* Light grey text */
        }

        /* Flash Message Styling */
        .flash {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
        }

        .flash.success {
            background-color: #4caf50; /* Success message background */
            color: #fff; /* White text for success */
        }

        .flash.error {
            background-color: #f44336; /* Error message background */
            color: #fff; /* White text for errors */
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            nav ul {
                flex-direction: column;
                align-items: flex-start;
            }

            nav ul li {
                margin-bottom: 10px;
            }
        }
    </style>

    <!-- Flash Message JavaScript -->
    <script>
        window.onload = function() {
            const flashMessage = "{{ get_flashed_messages()[0] if get_flashed_messages() else '' }}";
            if (flashMessage) {
                alert(flashMessage);  // Show flash message as a pop-up
            }
        }
    </script>

</head>
<body>
    <!-- Top Navigation Bar -->
    <nav>
        <ul>
            <li><a href="{{ url_for('main.destination') }}">Home</a></li>
            {% if current_user.is_authenticated %}
                <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
                <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
            {% else %}
                <li><a href="{{ url_for('auth.login') }}">Login</a></li>
                <li><a href="{{ url_for('auth.signup') }}">Signup</a></li>
            {% endif %}
            <li><a href="{{ url_for('main.about') }}">About</a></li>
        </ul>
    </nav>

    <!-- Main Content Area -->
    <div class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
          {% if messages %}
            {% for category, message in messages %}
              <div class="flash {{ category }}">
                  {{ message }}
              </div>
            {% endfor %}
          {% endif %}
        {% endwith %}

        {% block content %}{% endblock %}
    </div>

</body>
</html>

================
File: driverProgram/templates/dash.html
================
<!-- dash.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='CSS/style.css') }}">
</head>
<body>
    <header>
        <h1>{{ title }}</h1>
        <nav>
            <ul>
                <li><a href="{{ url_for('main.destination') }}">Home</a></li>
                {% if current_user.is_authenticated %}
                    <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
                    <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
                {% endif %}
                <li><a href="{{ url_for('main.about') }}">About</a></li>
            </ul>
        </nav>
    </header>
    
    <div class="dashboard-container">
        <!-- Sidebar Menu -->
        <nav class="sidebar-menu">
            <ul>
                <!-- Placeholder for role-specific links -->
                {% block sidebar %}{% endblock %}
            </ul>
        </nav>
        
        <!-- Main Content Area -->
        <main class="content-area">
            <h2>{{ title }}</h2>
            <!-- Placeholder for role-specific content -->
            {% block content %}{% endblock %}
        </main>
    </div>
</body>
</html>

================
File: driverProgram/templates/edit_profile.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Profile - BigRig Bonuses</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body, html {
            height: 100%;
            font-family: 'Poppins', sans-serif;
            background-color: #1a1a1a;
            color: #fff;
        }

        /* Navigation */
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 50px;
            background-color: rgba(0, 0, 0, 0.8);
            position: fixed;
            width: 100%;
            z-index: 10;
            top: 0;
        }

        nav .logo {
            font-size: 1.8rem;
            font-weight: 600;
            color: #4a90e2;
        }

        nav ul {
            list-style: none;
            display: flex;
        }

        nav ul li {
            margin-left: 30px;
        }

        nav ul li a {
            color: #fff;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 400;
            transition: color 0.3s;
        }

        nav ul li a:hover {
            color: #4a90e2;
        }

        /* Profile Edit Container */
        .profile-edit-wrapper {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .profile-edit-container {
            background-color: #2b2b2b;
            padding: 2.5rem;
            border-radius: 12px;
            max-width: 600px;
            width: 100%;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
            margin-top: 100px;
        }

        .profile-edit-container h2 {
            text-align: center;
            margin-bottom: 1.5rem;
            color: #4a90e2;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #4a90e2;
            font-size: 1rem;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            background-color: #333;
            color: #fff;
            border: 1px solid #555;
            border-radius: 8px;
        }

        .form-control:focus {
            border-color: #4a90e2;
            outline: none;
            box-shadow: 0 0 0 0.2rem rgba(74, 144, 226, 0.3);
        }

        .btn-save {
            background-color: #4a90e2;
            border: none;
            padding: 0.75rem 2rem;
            width: 100%;
            color: #fff;
            font-size: 1.1rem;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 1.5rem;
        }

        .btn-save:hover {
            background-color: #367bb7;
        }

        .form-row {
            display: flex;
            gap: 20px;
        }

        .form-row .form-group {
            flex: 1;
        }

        /* Responsive Design */
        @media (max-width: 600px) {
            .form-row {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>

    <!-- Navigation Bar -->
    <nav>
        <div class="logo">BigRig Bonuses</div>
        <ul>
            <li><a href="{{ url_for('main.destination') }}">Home</a></li>
            {% if current_user.is_authenticated %}
                <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
                <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
            {% else %}
                <li><a href="{{ url_for('auth.login') }}">Login</a></li>
                <li><a href="{{ url_for('auth.signup') }}">Signup</a></li>
            {% endif %}
            <li><a href="{{ url_for('main.about') }}">About</a></li>
        </ul>
    </nav>

    <div class="profile-edit-wrapper">
        <div class="profile-edit-container">
            <h2>Edit Profile</h2>
            <form method="POST" action="{{ url_for('main.update_profile') }}">
                <div class="form-group">
                    <label for="username">Username</label>
                    <input type="text" id="username" name="username" class="form-control" value="{{ user.username }}" required>
                </div>
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" name="email" class="form-control" value="{{ user.email }}" required>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="phone">Phone Number</label>
                        <input type="tel" id="phone" name="phone" class="form-control" value="{{ user.phone or '' }}">
                    </div>
                    <div class="form-group">
                        <label for="address">Address</label>
                        <input type="text" id="address" name="address" class="form-control" value="{{ user.address or '' }}">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="gender">Gender</label>
                        <select id="gender" name="gender" class="form-control">
                            <option value="male" {% if user.gender == 'male' %}selected{% endif %}>Male</option>
                            <option value="female" {% if user.gender == 'female' %}selected{% endif %}>Female</option>
                            <option value="other" {% if user.gender == 'other' %}selected{% endif %}>Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="date_of_birth">Date of Birth</label>
                        <input type="date" id="date_of_birth" name="date_of_birth" class="form-control" value="{{ user.date_of_birth or '' }}">
                    </div>
                </div>

                {% if user.role == 'sponsor' %}
                <div class="form-group">
                    <label for="sponsor_code">Sponsor Code</label>
                    <input type="text" id="sponsor_code" name="sponsor_code" class="form-control" value="{{ user.sponsor_code or '' }}" readonly>
                </div>
                {% endif %}

                <button type="submit" class="btn-save">Save Changes</button>
            </form>
        </div>
    </div>

</body>
</html>

================
File: driverProgram/templates/profile.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - Read Only</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #1a1a1a;
            color: #fff;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }

        /* Navigation */
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 50px;
            background-color: rgba(0, 0, 0, 0.8); /* Transparent navbar */
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 10;
        }

        nav .logo {
            font-size: 1.8rem;
            font-weight: 600;
            color: #4a90e2;
        }

        nav ul {
            list-style: none;
            display: flex;
        }

        nav ul li {
            margin-left: 30px;
        }

        nav ul li a {
            color: #fff;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 400;
            transition: color 0.3s;
        }

        nav ul li a:hover {
            color: #4a90e2;
        }

        .profile-container {
            max-width: 600px;
            background-color: #2b2b2b;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            text-align: center;
            margin-top: 100px; /* Space for the navbar */
        }

        .profile-header {
            margin-bottom: 1.5rem;
        }

        .profile-header h1 {
            font-size: 2rem;
            color: #4a90e2;
        }

        .profile-item {
            margin-bottom: 1rem;
            text-align: left;
        }

        .profile-item span {
            font-weight: bold;
            color: #4a90e2;
        }

        .edit-button {
            background-color: #4a90e2;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 1.5rem;
        }

        .edit-button:hover {
            background-color: #367bb7;
        }
    </style>
</head>
<body>


    <nav>
        <div class="logo">BigRig Bonuses</div>
        <ul>
            <li><a href="{{ url_for('main.destination') }}">Home</a></li>
            {% if current_user.is_authenticated %}
                <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
                <li><a href="{{ url_for('auth.logout') }}">Logout</a></li>
            {% else %}
                <li><a href="{{ url_for('auth.login') }}">Login</a></li>
                <li><a href="{{ url_for('auth.signup') }}">Signup</a></li>
            {% endif %}
            <li><a href="{{ url_for('main.about') }}">About</a></li>
        </ul>
    </nav>


    <div class="profile-container">
        <div class="profile-header">
            <h1>Profile</h1>
        </div>

        <div class="profile-item">
            <span>Username:</span> {{ user.username }}
        </div>

        <div class="profile-item">
            <span>Email:</span> {{ user.email }}
        </div>

        <div class="profile-item">
            <span>Phone:</span> {{ user.phone or 'N/A' }}
        </div>

        <div class="profile-item">
            <span>Address:</span> {{ user.address or 'N/A' }}
        </div>

        <div class="profile-item">
            <span>Date of Birth:</span> {{ user.date_of_birth or 'N/A' }}
        </div>

        <div class="profile-item">
            <span>Gender:</span> {{ user.gender or 'N/A' }}
        </div>

        {% if user.role == 'sponsor' %}
        <div class="profile-item">
            <span>Sponsor Code:</span> {{ user.sponsor_code or 'N/A' }}
        </div>
        {% endif %}

        <!-- Button to Edit Profile -->
        <form action="{{ url_for('main.edit_profile') }}" method="GET">
            <button type="submit" class="edit-button">Edit Profile</button>
        </form>
    </div>
</body>
</html>

================
File: driverProgram/__init__.py
================
from flask import Flask
from flask_login import LoginManager
from flask_sqlalchemy import SQLAlchemy
from config import Config
import os
from dotenv import load_dotenv
from flask_mail import Mail
from datetime import timedelta

def check_database_connection():
    try:
        # Test a simple query to check the connection
        db.session.execute('SELECT 1')
        return True
    except:
        return False

import boto3

load_dotenv()



app = Flask(__name__)
app.config.from_object(Config)
db = SQLAlchemy(app)
mail = Mail()

# AWS Cognito configuration
CognitoUserPoolId = os.environ.get('COGNITO_USER_POOL_ID')
CognitoClientId = os.environ.get('COGNITO_CLIENT_ID')
CognitoRegion = os.environ.get('COGNITO_REGION')

# Create a Cognito client
cognito_client = boto3.client('cognito-idp', region_name=CognitoRegion)

def check_database_connection():
    try:
        # Test a simple query to check the connection
        db.session.execute('SELECT 1')
        return True
    except:
        return False


# Initialize Flask-Login's LoginManager
login_manager = LoginManager()
login_manager.login_view = 'auth.login'

@login_manager.user_loader
def load_user(user_id):
    """This callback is used to reload the user object from the user ID stored in the session."""
    from .models import User
    return User.query.get(int(user_id))

def create_app():
    login_manager.init_app(app)

    from .routes.auth import auth_bp
    from .routes.main import main_bp
    app.register_blueprint(auth_bp)
    app.register_blueprint(main_bp)

    # Mail configuration
    app.config['MAIL_SERVER'] = 'smtp.gmail.com'
    app.config['MAIL_PORT'] = 465
    app.config['MAIL_USE_SSL'] = True
    app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')
    app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')
    mail.init_app(app)

    # Remember cookie duration
    app.config['REMEMBER_COOKIE_DURATION'] = timedelta(days=7)

    # Create the database tables if they don't exist yet
    with app.app_context():
        db.create_all()

    return app

================
File: driverProgram/email.py
================
"""
from flask_mail import Message
from flask import current_app, url_for
from . import mail 

def send_email(user):
    token = user.get_reset_token()
    msg = Message(
        subject='Reset Your Password',
        sender=current_app.config['MAIL_USERNAME'],  
        recipients=[user.email]
    )
    msg.body = f'''To reset your password, visit the following link:
{url_for('auth.reset_token', token=token, _external=True)}
If you did not make this request then simply ignore this email and no changes will be made.
'''
    mail.send(msg) 

"""

================
File: driverProgram/forms.py
================
# driverProgram/forms.py
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, SelectField, BooleanField, DateField
from wtforms.validators import DataRequired, Email, EqualTo, Length, ValidationError, Optional
from .models import User

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=150)])
    password = PasswordField('Password', validators=[DataRequired()])
    remember_me = BooleanField('Remember Me')
    submit = SubmitField('Login')

class SignupForm(FlaskForm):
    first_name = StringField('First Name', validators=[DataRequired()])
    last_name = StringField('Last Name', validators=[DataRequired()])
    address = StringField('Address', validators=[DataRequired()])
    phone = StringField('Phone', validators=[DataRequired()])
    email = StringField('Email', validators=[DataRequired(), Email()])
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    confirm_password = PasswordField('Confirm Password', validators=[DataRequired()])
    role = SelectField('Role', choices=[('Driver', 'Driver'), ('admin', 'Admin'), ('sponsor', 'Sponsor')], validators=[DataRequired()])
    sponsor_code = StringField('Sponsor Code', validators=[Optional()])
    birthdate = DateField('Birthdate', format='%Y-%m-%d', validators=[Optional()])
    gender = SelectField('Gender', choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], validators=[Optional()])
    submit = SubmitField('Sign Up')

    def validate_username(self, username):
        user = User.query.filter_by(username=username.data).first()
        if user:
            raise ValidationError('Username is already taken.')

    def validate_email(self, email):
        user = User.query.filter_by(email=email.data).first()
        if user:
            raise ValidationError('Email is already registered.')

class ResetPasswordRequestForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    submit = SubmitField('Request Password Reset')

class ConfirmResetForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    verification_code = StringField('Verification Code', validators=[DataRequired()])
    new_password = PasswordField('New Password', validators=[
        DataRequired(),
        EqualTo('confirm_password', message='Passwords must match')
    ])
    confirm_password = PasswordField('Confirm Password', validators=[DataRequired()])
    submit = SubmitField('Reset Password')

================
File: driverProgram/models.py
================
from flask_login import UserMixin
from . import db  # Import db from the current package

class User(db.Model, UserMixin):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    role = db.Column(db.String(50), nullable=False)
    sponsor_code = db.Column(db.String(6), nullable=True)
    
    sponsor = db.relationship('Sponsor', backref='user',uselist=False)

# Sponsor model for storing sponsor-specific information
class Sponsor(db.Model):
    __tablename__ = 'sponsors'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)  # Foreign key to User table
    company_name = db.Column(db.String(150), nullable=False)
    location = db.Column(db.String(150), nullable=False)
    phone = db.Column(db.String(20), nullable=True)
    email = db.Column(db.String(150), nullable=True)
    website = db.Column(db.String(150), nullable=True)
    bio = db.Column(db.Text, nullable=True)

    # Relationship to job postings
    job_postings = db.relationship('JobPosting', backref='sponsor', lazy=True)

# JobPosting model for storing job postings related to sponsors
class JobPosting(db.Model):
    __tablename__ = 'job_postings'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)
    location = db.Column(db.String(150), nullable=False)
    salary = db.Column(db.String(50), nullable=False)
    hours = db.Column(db.String(50), nullable=True)
    experience = db.Column(db.String(100), nullable=True)

    # Foreign key to the Sponsor table
    sponsor_id = db.Column(db.Integer, db.ForeignKey('sponsors.id'), nullable=False)

================
File: .gitignore
================
__pycache__/
*.py[cod]
venv/
.env
.DS_STORE/
.vscode/

================
File: config.py
================
import os
from dotenv import load_dotenv
from datetime import timedelta

load_dotenv()

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY', 'default_secret_key')
    DB_HOST = os.getenv('DB_HOST', 'team13-rds.cobd8enwsupz.us-east-1.rds.amazonaws.com')
    DB_USER = os.getenv('DB_USER', 'admin')
    DB_PASSWORD = os.getenv('DB_PASSWORD', 'Cpsc4910_Team13!Rds')
    DB_NAME = os.getenv('DB_NAME', 'Team13_database')
    SQLALCHEMY_DATABASE_URI = (
        'mysql+pymysql://admin:Cpsc4910_Team13!Rds@team13-rds.cobd8enwsupz.us-east-1.rds.amazonaws.com:3306/Team13_database'
    )
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    #AWS Cognito connection details 
    COGNITO_USER_POOL_ID = os.environ.get('COGNITO_USER_POOL_ID')
    COGNITO_CLIENT_ID = os.environ.get('COGNITO_CLIENT_ID')
    COGNITO_REGION = os.environ.get('COGNITO_REGION')

================
File: driver_program.py
================
from driverProgram import create_app


app = create_app()

if __name__ == "__main__":
    app.run(debug=True)

================
File: README.md
================
# CPSC-4910

================
File: requirements.txt
================
blinker==1.8.2
boto3==1.35.37
botocore==1.35.37
click==8.1.7
Flask==3.0.3
Flask-Login==0.6.3
Flask-Mail==0.10.0
Flask-SQLAlchemy==3.1.1
Flask-WTF==1.2.1
greenlet==3.1.1
itsdangerous==2.2.0
Jinja2==3.1.4
jmespath==1.0.1
MarkupSafe==2.1.5
PyJWT==2.9.0
PyMySQL==1.1.1
python-dateutil==2.9.0.post0
python-dotenv==1.0.1
s3transfer==0.10.3
six==1.16.0
SQLAlchemy==2.0.35
typing_extensions==4.12.2
urllib3==2.2.3
Werkzeug==3.0.4
WTForms==3.1.2
